[{"content":" 现在我理解的机器学习是这样的：训练集上有正确答案，把数据输入到深度神经网络，会有一个输出，根据这个输出与正确答案的比较，调整中间神经网络的参数。不断调整，直到输出结果与正确答案接近。那么中间的黑匣子，即深度神经网络是什么样的呢？要逐步打开。从最直接的网络开始，原始数据→模型→输出结果，再来考虑为了得到合理的结果，需要对这个过程增加的处理。\n TensorFlow提供的例子-图像分类 \n只是很粗略地看待这个例子，先不关注细节。这个例子的输入输出很简单，就是输入图片数据，输出1234类别，每个数字代表一类衣服。中间黑匣子部分的网络是这样子的：\nmodel = keras.Sequential([ keras.layers.Flatten(input_shape=(28, 28)), #第一层 keras.layers.Dense(128, activation='relu'), #第二层\rkeras.layers.Dense(10)#第三层\r])\r 第一层是对图像数据的处理，做一个格式化，并没有进行学习；\n第二层128表示有128个节点（为什么要设置128个节点呢？），激活函数设置的是relu（为什么是relu呢？）；\n第三层10表示有10个节点（因为一共有10个品类，如下图所示，每个节点对应一个种类，哪个节点值高就代表是对应的种类。\n\n模型好像并不复杂。\n但是学习过程可能就没那么容易，这些运算的部分都是各种框架优越的地方，它解决运算的问题。比如在用TensorFlow训练这个模型，事先指定好了：\n 损失函数： 用于测量模型在训练期间的准确率 优化器： 决定模型如何根据其看到的数据和自身的损失函数进行更新 指标： 用于监控训练和测试步骤  仅仅用这一条代码就可以让训练进行起来：\nmodel.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])\r 之后还需要用测试集进行验证评估模型训练的效果。当然，正常还要包括可视化训练结果等工作。\n总结 在这个例子中，我认为接下来有两个问题比较关键：\n 数据集中的数据要进行怎样的预处理，才会使得模型训练不出错并且高效？ 对神经网络中涉及的名词要进行熟悉，明白来龙去脉。比如说到激活函数，有哪几种，分别用于什么场景？说到卷积、池化等等，都要有概念。  ","date":"2020-09-24","permalink":"https://york-yanyu.github.io/post/dl2/","tags":["Deep-Learning"],"title":"打开输入输出中间的黑匣子"},{"content":" Day1：Java简介、Java程序基础 Day2：流程控制、数组操作 Day3：面向对象基础 Day4：Java核心类 Day5：异常处理 Day6：反射、注解与泛型 Day7：集合 Day8：IO Day9：日期与时间 Day10:单元测试 Day11：正则表达式 Day12：加密与安全 Day13：多线程 Day14：Maven基础 Day15：网络编程 Day16：XML/JSON与JDBC编程 Day17：函数式编程 Day18：设计模式 Day19：Web开发 Day20：Spring开发 Day21：Spring Boot开发 Day22：Spring Cloud开发 Day23-Day30：协调上述时间  ","date":"2020-09-24","permalink":"https://york-yanyu.github.io/post/java-0/","tags":["学习Java"],"title":"进度安排计划"},{"content":" 明确使用TensorFlow作为机器学习的框架，建立机器学习的基本认识\n TensorFlow部署 TensorFlow 是一个端到端开源机器学习平台。它拥有一个全面而灵活的生态系统，其中包含各种工具、库和社区资源，可助力研究人员推动先进机器学习技术的发展，并使开发者能够轻松地构建和部署由机器学习提供支持的应用。在windows笔记本里配置TensorFlow开发环境的具体步骤如下：\n 在笔记本电脑里安装Miniconda； 在环境变量中添加所安装Miniconda的相关路径； 将下载源改为清华镜像； 新建一个python3.7的环境，命名为tf； 在tf环境中用conda install安装TensorFlow  机器学习的基本认识 学习算法的目标可以理解为，在整个数据集上获取经验。那么深度学习采用的是多层神经网络来获取这个经验。为了实现这个目的，我们需要将数据集分成：\n 训练集 验证集 测试集  算法的具体做法就是在训练集上，不断迭代调整参数，让输出结果与实际结果越来越接近。\n用验证集，对训练集的模型进行测试，得到准确率，这时候会有遇到训练集上表现良好，但是验证集得到的结果准确率很低等问题（欠拟合或者过拟合）。这就需要对模型的策略、超参数等进行调整。\n测试集，就是用完全没有经过训练的数据集对模型进行最终的性能评价。\n","date":"2020-09-23","permalink":"https://york-yanyu.github.io/post/dl1/","tags":["Deep-Learning"],"title":"机器学习的目标？"}]